from fastapi import FastAPI
from fastapi.responses import JSONResponse
import aiohttp
import asyncio

app = FastAPI()

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Rossko
async def fetch_rossko(part_number: str):
    # –ó–¥–µ—Å—å —Ç–≤–æ–π –∫–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Rossko
    return [
        {"brand": "NTP", "part_number": part_number, "name": None, "price": None, "availability": 0},
        {"brand": "Hyundai/Kia", "part_number": part_number, "name": "–ö–æ–ª–æ–¥–∫–∏ —Ç–æ—Ä–º–æ–∑–Ω—ã–µ –∑–∞–¥–Ω–∏–µ", "price": None, "availability": 0},
        {"brand": "SUFIX", "part_number": "SP-1187", "name": "–§–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π (–∫–∞—Ä—Ç—Ä–∏–¥–∂)", "price": 247.0, "availability": 1},
        {"brand": "Sangsin", "part_number": part_number, "name": "–ö–æ–ª–æ–¥–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ —Ç–æ—Ä–º–æ–∑–∞ (–∑–∞–¥–Ω—è—è) (—Å –ø–ª–∞—Å—Ç–∏–Ω–æ–π)", "price": 1500.77, "availability": 23}
    ]

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Berg
async def fetch_berg(session, part_number: str):
    # –ó–¥–µ—Å—å —Ç–≤–æ–π –∫–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Berg
    return {
        "resources": [
            {
                "article": "SP-1187",
                "brand": {"id": 1206540, "name": "SUFIX"},
                "name": "–§–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π BMW 3(E46 / 90) 2.5D-3.0D...",
                "offers": [
                    {"warehouse": {"name": "BMS"}, "price": 247, "quantity": 1},
                    {"warehouse": {"name": "LNX"}, "price": 247, "quantity": 34}
                ]
            },
            {
                "article": "SP-1187",
                "brand": {"id": 1139185, "name": "ZEKKERT"},
                "name": "–ó–µ—Ä–∫–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–∞–≤—ã–π –≤—ã–ø—É–∫–ª—ã–π —Å –ø–æ–¥–æ–≥—Ä–µ–≤–æ–º BMW...",
                "offers": [{"warehouse": {"name": "RTZ"}, "price": 1495.29, "quantity": 1}]
            }
        ]
    }

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ê–≤—Ç–æ—Å–æ—é–∑–∞
async def fetch_autosoyuz(session, part_number: str):
    # –ó–¥–µ—Å—å —Ç–≤–æ–π –∫–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –ê–≤—Ç–æ—Å–æ—é–∑–∞
    return {"Error": "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ withouttransit."}

# ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–ø—á–∞—Å—Ç—è—Ö
@app.get("/get_parts_info")
async def get_parts_info(part_number: str):
    async with aiohttp.ClientSession() as session:
        rossko_task = fetch_rossko(part_number)
        berg_task = fetch_berg(session, part_number)
        autosoyuz_task = fetch_autosoyuz(session, part_number)
        rossko_data, berg_data, autosoyuz_data = await asyncio.gather(rossko_task, berg_task, autosoyuz_task)

    response_data = {
        "rossko": [
            {"brand": item["brand"], "part_number": item["part_number"], "name": item["name"], "price": item["price"], "availability": item["availability"]}
            for item in rossko_data
        ],
        "berg": [
            {"brand": item["brand"]["name"], "part_number": item["article"], "name": item["name"], "price": item["offers"][0]["price"] if item["offers"] else None, "availability": sum(offer["quantity"] for offer in item["offers"]) if item["offers"] else 0}
            for item in berg_data["resources"]
        ],
        "autosoyuz": autosoyuz_data
    }
    
    return JSONResponse(content=response_data)

# ‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API
@app.get("/")
def home():
    return {"message": "API is running! Use /docs to test"}
